# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from pathlib import Path
import json
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

filename = path = Path(__file__).parent / "usecaseData_full.json"


nameTest = []

def dataForTest():
    global nameTest
    commonData = {}
    dataTest = []
    with open(filename, "r") as f:
        data = json.load(f)
        for key, values in data.items():
            print(key)
            if "commonData" in key:
                commonData = values
            if "test" in key:
                url = values["url"]
                loginCredential = values["loginCredential"]
                eventName = values["eventName"]
                startTime = values["startTime"]
                extend = values["extend"]
                eventDescription = values["eventDescription"]
                eventLocation = values["eventLocation"]
                durationSelection = values["durationSelection"]
                repeat = values["repeat"]
                expectedResult = values["expectResult"]
                dataTest.append(
                    (commonData, url, loginCredential, eventName, startTime,
                     extend, eventDescription, eventLocation,
                     durationSelection, repeat,
                     expectedResult)
                )
                nameTest.append(key)

    return dataTest

"""
get element value, assuming each element have "value" attribute
"""
def getElementValue(element):
    return element["value"].strip()


class TestUsecase1():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(10)
        self.driver.set_page_load_timeout(3000)
        self.vars = {}
        self.exception = False

    def teardown_method(self, method):
        self.driver.quit()
        pass

    """
    Save effort when finding element, assuming all element object has "findMethod" and "findString" attribute.
    findMethod: By.??
    findString: a string to find element, depend on the findMethod.
    """
    def findElementShort(self, element):
        return self.driver.find_element(By.get_finder(element["findMethod"]), element["findString"])

    def exit_help_modal(self, driver):
        # Create an ActionChains object
        actions = ActionChains(driver)
        # Send the ESC key to exit the help modal
        actions.send_keys(Keys.ESCAPE).perform()
        actions.send_keys(Keys.ESCAPE).perform()


    @pytest.mark.parametrize(
        "commonData, "
        "url, "
        "loginCredential, "  # (username, password)
        "eventName, "
        "startTime, "  # (day, month, year, hour, minute)
        "extend, "  # (yes, no)
        "eventDescription, "
        "eventLocation, "
        "durationSelection, "  # (0: no duration, 1: until, 2: in minutes) 
        "repeat, "  # (yes, no)
        "expectedResult, ",
        dataForTest(),
        ids=nameTest
    )
    def test_usecase1(self, commonData, url, loginCredential, eventName, startTime, extend,
                      eventDescription, eventLocation, durationSelection,
                      repeat,
                      expectedResult):
        self.driver.get(url)
        self.driver.set_window_size(1274, 757)
        self.findElementShort(commonData["loginHomeButton"]).click()
        time.sleep(3)
        self.findElementShort(loginCredential["username"]).clear()
        self.findElementShort(loginCredential["password"]).clear()
        self.findElementShort(loginCredential["username"]).send_keys(getElementValue(loginCredential["username"]))
        self.findElementShort(loginCredential["password"]).send_keys(getElementValue(loginCredential["password"]))

        # self.driver.find_element(By.CSS_SELECTOR, ".login-container").click()
        self.findElementShort(commonData["loginButton"]).click()
        time.sleep(3)       #page transition wait
        self.findElementShort(commonData["dashboardButton"]).click()
        time.sleep(2)       #page transition wait

        self.vars["month"] = self.driver.find_element(By.CSS_SELECTOR, ".current:nth-child(3)").text
        if self.driver.execute_script("return (arguments[0] != \"November 2024\")", self.vars["month"]):
            assert self.driver.find_element(By.CSS_SELECTOR, ".arrow_text:nth-child(2)").text == "November"
            self.driver.find_element(By.CSS_SELECTOR, ".arrow_text:nth-child(2)").click()
            time.sleep(1)

        try:
            while self.findElementShort(commonData["cleanEventFailedToDelete"]).is_displayed():
                self.findElementShort(commonData["cleanEventFailedToDelete"]).click()
                time.sleep(2)
                delButton = self.findElementShort(commonData["deleteEventButton"])
                delButton.click()
                time.sleep(3)
                delButton = self.findElementShort(commonData["confirmDelete"])
                delButton.click()
                time.sleep(3)
                self.exit_help_modal(self.driver)
        except:
            pass

        self.findElementShort(commonData["newEventButton"]).click()
        time.sleep(1)
        self.findElementShort(eventName).send_keys(getElementValue(eventName))

        self.findElementShort(startTime["day"]).click()
        dropdown = self.findElementShort(startTime["day"])
        dropdown.find_element(By.XPATH, f".//option[. = '{getElementValue(startTime["day"])}']").click()

        self.findElementShort(startTime["month"]).click()
        dropdown = self.findElementShort(startTime["month"])
        dropdown.find_element(By.XPATH, f".//option[. = '{getElementValue(startTime["month"])}']").click()

        self.findElementShort(startTime["year"]).click()
        dropdown = self.findElementShort(startTime["year"])
        dropdown.find_element(By.XPATH, f".//option[. = '{getElementValue(startTime["year"])}']").click()

        self.findElementShort(startTime["hour"]).click()
        dropdown = self.findElementShort(startTime["hour"])
        ##get elements from parent element using XPATH
        ##NOTE: in order to utilize XPATH from current element, you must add "." to beginning of path
        dropdown.find_element(By.XPATH, f".//option[. = '{getElementValue(startTime["hour"])}']").click()

        self.findElementShort(startTime["minute"]).click()
        dropdown = self.findElementShort(startTime["minute"])
        dropdown.find_element(By.XPATH, f".//option[. = '{getElementValue(startTime["minute"])}']").click()
        if eval(getElementValue(extend)):
            self.findElementShort(extend).click()
            time.sleep(3)
            # access data in a iframe: https://stackoverflow.com/questions/52045083/how-to-get-attribute-src-from-iframe-in-iframe-using-selenium
            self.driver.switch_to.frame(eventDescription["frameName"])
            element = self.findElementShort(eventDescription)
            self.driver.execute_script(
                "if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '" + getElementValue(eventDescription) + "'}",
                element)
            time.sleep(3)
            self.driver.execute_script(
                "if(arguments[0].contentEditable === 'true') {arguments[0].innerText = ''}",
                element)
            time.sleep(3)
            self.driver.execute_script(
                "if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '" + getElementValue(
                    eventDescription) + "'}",
                element)
            self.driver.switch_to.default_content()

            self.findElementShort(eventLocation).send_keys(getElementValue(eventLocation))
            self.driver.find_element(By.get_finder(durationSelection["findMethod"]),
                                     f"{durationSelection["findString"]}{getElementValue(durationSelection)}").click()

            if getElementValue(durationSelection) == "1":
                self.findElementShort(durationSelection["durationUntil"]["day"]).click()
                dropdown = self.findElementShort(durationSelection["durationUntil"]["day"])
                dropdown.find_element(
                    By.XPATH, f".//option[. = '{getElementValue(durationSelection["durationUntil"]["day"])}']").click()

                self.findElementShort(durationSelection["durationUntil"]["month"]).click()
                dropdown = self.findElementShort(durationSelection["durationUntil"]["month"])
                dropdown.find_element(
                    By.XPATH, f".//option[. = '{getElementValue(durationSelection["durationUntil"]["month"])}']").click()

                self.findElementShort(durationSelection["durationUntil"]["year"]).click()
                dropdown = self.findElementShort(durationSelection["durationUntil"]["year"])
                dropdown.find_element(
                    By.XPATH, f".//option[. = '{getElementValue(durationSelection["durationUntil"]["year"])}']").click()

                self.findElementShort(durationSelection["durationUntil"]["hour"]).click()
                dropdown = self.findElementShort(durationSelection["durationUntil"]["hour"])
                dropdown.find_element(
                    By.XPATH, f".//option[. = '{getElementValue(durationSelection["durationUntil"]["hour"])}']").click()

                self.findElementShort(durationSelection["durationUntil"]["minute"]).click()
                dropdown = self.findElementShort(durationSelection["durationUntil"]["minute"])
                dropdown.find_element(
                    By.XPATH, f".//option[. = '{getElementValue(durationSelection["durationUntil"]["minute"])}']").click()

            elif getElementValue(durationSelection) == "2":

                self.findElementShort(durationSelection["durationMinutes"]).click()
                self.findElementShort(durationSelection["durationMinutes"]).send_keys(
                    getElementValue(durationSelection["durationMinutes"]))
            if eval(getElementValue(repeat)):

                self.findElementShort(repeat).click()
                # self.driver.find_element(By.ID, "fitem_id_repeats").click()
                self.findElementShort(repeat["noOfRepeat"]).clear()
                self.findElementShort(repeat["noOfRepeat"]).send_keys(getElementValue(repeat["noOfRepeat"]))
        self.findElementShort(commonData["saveEventButton"]).click()
        time.sleep(3)

        if getElementValue(eventName) == "":
            assert (self.findElementShort(expectedResult["expectedError"]).text ==
                    getElementValue(expectedResult["expectedError"]))
            self.exception = True

        if (eval(getElementValue(extend)) and
                getElementValue(durationSelection) == "1" and
                getElementValue(startTime["day"]) > getElementValue(durationSelection["durationUntil"]["day"])):
            time.sleep(3)
            assert (self.findElementShort(expectedResult["expectedError"]).text ==
                    getElementValue(expectedResult["expectedError"]))
            self.exception = True
            self.findElementShort(durationSelection["durationUntil"]["day"]).click()
            dropdown = self.findElementShort(durationSelection["durationUntil"]["day"])
            dropdown.find_element(
                By.XPATH, f".//option[. = '{getElementValue(startTime["day"])}']").click()

        if not self.exception:
            self.findElementShort(commonData["eventLocation1"]).click()
            # self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(1) > .col-11").click()
            time.sleep(2)
            assert (self.findElementShort(expectedResult["expectedTime"]).text ==
                    getElementValue(expectedResult["expectedTime"]).replace("Â", ""))
            if eval(getElementValue(extend)):
                if getElementValue(expectedResult["expectedDescription"]) != "":
                    assert (self.findElementShort(expectedResult["expectedDescription"]).text ==
                            getElementValue(expectedResult["expectedDescription"]))
                if getElementValue(expectedResult["expectedLocation"]) != "":
                    assert (self.findElementShort(expectedResult["expectedLocation"]).text ==
                            getElementValue(expectedResult["expectedLocation"]))
            time.sleep(1)
            delButton = self.findElementShort(commonData["deleteEventButton"])
            delButton.click()
            time.sleep(3)

            if not eval(getElementValue(repeat)):
                delButton = self.findElementShort(commonData["confirmDelete"])
                delButton.click()
                time.sleep(1)
            else:
                delButton = self.findElementShort(commonData["confirmDelete"])
                delButton.click()
                time.sleep(3)
                # delete second event:
                self.findElementShort(commonData["eventLocation2"]).click()
                time.sleep(2)
                assert (self.findElementShort(expectedResult["expectedTime2"]).text ==
                        getElementValue(expectedResult["expectedTime2"]).replace("Â", ""))
                if eval(getElementValue(extend)):
                    if getElementValue(expectedResult["expectedDescription"]) != "":
                        assert (self.findElementShort(expectedResult["expectedDescription"]).text ==
                                getElementValue(expectedResult["expectedDescription"]))
                    if getElementValue(expectedResult["expectedLocation"]) != "":
                        assert (self.findElementShort(expectedResult["expectedLocation"]).text ==
                                getElementValue(expectedResult["expectedLocation"]))
                time.sleep(2)       # to find the damn button
                delButton = self.findElementShort(commonData["deleteEventButton"])
                delButton.click()
                time.sleep(1)
                delButton = self.findElementShort(commonData["confirmDelete"])
                delButton.click()

        else:       # exception = True
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").clear()
            self.driver.find_element(By.ID, "id_name").send_keys("exception")
            time.sleep(3)
            exButton = self.findElementShort(commonData["saveEventButton"])
            exButton.click()
            if exButton.is_displayed():
                exButton.click()
            time.sleep(1)
            self.findElementShort(commonData["exceptionEventLocation"]).click()
            time.sleep(2)
            self.findElementShort(commonData["deleteEventButton"]).click()
            time.sleep(1)
            delButton = self.findElementShort(commonData["confirmDelete"])
            delButton.click()

        #log out
        time.sleep(3)
        self.findElementShort(commonData["userToggleMenu"]).click()
        self.findElementShort(commonData["logOutButton"]).click()
