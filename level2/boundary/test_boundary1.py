# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from pathlib import Path
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

filename = path = Path(__file__).parent / "boundaryData_full.json"

nameTest = []

def dataForTest():
    global nameTest
    commonData = {}
    dataTest = []
    with open(filename, "r") as f:
        data = json.load(f)
        for key, values in data.items():
            print(key)
            if "commonData" in key:
                commonData = values
            if "test" in key:
                url = values["url"]
                loginCredential = values["loginCredential"]
                answer1 = values["answer1"]
                answer2 = values["answer2"]
                expectedTotal = values["expectedTotal"]
                dataTest.append(
                    (commonData, url, loginCredential, answer1, answer2, expectedTotal)
                )
                nameTest.append(key)

    return dataTest

"""
get element value, assuming each element have "value" attribute
"""


def getElementValue(element):
    return element["value"].strip()


class TestBoundary1():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(10)
        self.driver.set_page_load_timeout(3000)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()
        pass

    def exit_help_modal(self, driver):
        # Create an ActionChains object
        actions = ActionChains(driver)
        # Send the ESC key to exit the help modal
        actions.send_keys(Keys.ESCAPE).perform()
        actions.send_keys(Keys.ESCAPE).perform()

    """
          Save effort when finding element, assuming all element object has "findMethod" and "findString" attribute.
          findMethod: By.??
          findString: a string to find element, depend on the findMethod.
          """

    def findElementShort(self, element):
        return self.driver.find_element(By.get_finder(element["findMethod"]), element["findString"])

    @pytest.mark.parametrize(
        "commonData, "
        "url, "
        "loginCredential, "  # (username, password)
        "answer1, "
        "answer2, "
        "expectedTotal, ",
        dataForTest(),
        ids=nameTest
    )
    def test_boundary1(self, commonData, url, loginCredential,
                       answer1, answer2, expectedTotal):
        self.driver.get(url)
        self.driver.set_window_size(1210, 1017)
        self.findElementShort(commonData["loginHomeButton"]).click()
        time.sleep(3)
        self.findElementShort(loginCredential["username"]).clear()
        self.findElementShort(loginCredential["password"]).clear()
        self.findElementShort(loginCredential["username"]).send_keys(getElementValue(loginCredential["username"]))
        self.findElementShort(loginCredential["password"]).send_keys(getElementValue(loginCredential["password"]))
        self.findElementShort(commonData["loginButton"]).click()
        time.sleep(3)
        time.sleep(3)

        self.findElementShort(commonData["myCourseButton"]).click()
        time.sleep(3)
        self.findElementShort(commonData["myFirstCourse"]).click()
        time.sleep(3)
        self.exit_help_modal(self.driver)
        self.findElementShort(commonData["quiz1"]).click()
        self.findElementShort(commonData["attemptQuizButton"]).click()
        time.sleep(3)
        self.findElementShort(answer1).clear()
        self.findElementShort(answer1).send_keys(getElementValue(answer1))
        self.findElementShort(answer2).clear()
        self.findElementShort(answer2).send_keys(getElementValue(answer2))
        self.findElementShort(commonData["finishQuizButton"]).click()
        self.findElementShort(commonData["submitQuizButton"]).click()
        self.findElementShort(commonData["confirmSubmitButton"]).click()
        time.sleep(2)
        assert self.findElementShort(expectedTotal).text == getElementValue(expectedTotal)
        actions = ActionChains(self.driver)
        # Scroll down till the end (Finish review button is INTERCEPTED BY THE STUPID "THIS PAGE WILL BE RESET" OF MOODLE")
        actions.scroll_by_amount(0, 1000).perform()
        self.findElementShort(commonData["finishReviewButton"]).click()
        time.sleep(3)
        self.findElementShort(commonData["userToggleMenu"]).click()
        self.findElementShort(commonData["logOutButton"]).click()
