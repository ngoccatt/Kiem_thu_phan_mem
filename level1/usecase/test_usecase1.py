# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from pathlib import Path
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

filename = path = Path(__file__).parent / "usecaseData_full.txt"

def dataForTest():
    dataTest = []
    with open(filename, "r") as f:
        line = f.readline()
        while line:
            data = line.split(";")
            for i in range(0, len(data)):
                data[i] = str(data[i]).strip()
            loginCredential = (data[0].split(","))
            eventName = data[1]
            startTime = (data[2].split(","))
            extend = eval(data[3])
            eventDescription = data[4]
            eventLocation = data[5]
            durationSelection = data[6]
            durationUntil = (data[7].split(","))
            durationMinutes = data[8]
            repeat = eval(data[9])
            noOfRepeat = data[10]
            expectedTime = data[11].replace("Â", "")
            expectedDescription = data[12]
            expectedLocation = data[13]
            expectedTime2 = data[14].replace("Â", "")
            expectedError = data[15]
            dataTest.append(
                (loginCredential, eventName, startTime, extend, eventDescription,
                 eventLocation, durationSelection, durationUntil, durationMinutes,
                 repeat, noOfRepeat, expectedTime, expectedDescription, expectedLocation,
                 expectedTime2, expectedError)
            )
            line = f.readline()
    return dataTest


class TestUsecase1():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.driver.implicitly_wait(10)
        self.driver.set_page_load_timeout(3000)
        self.vars = {}
        self.exception = False

    def teardown_method(self, method):
        self.driver.quit()
        pass

    @pytest.mark.parametrize(
        "loginCredential, "  # (username, password)
        "eventName, "
        "startTime, "  # (day, month, year, hour, minute)
        "extend, "  # (yes, no)
        "eventDescription, "
        "eventLocation, "
        "durationSelection, "  # (0: no duration, 1: until, 2: in minutes) 
        "durationUntil, "  # (day, month, year, hour, minute)
        "durationMinutes, "
        "repeat, "  # (yes, no)
        "noOfRepeat, "
        "expectedTime, "
        "expectedDescription, "
        "expectedLocation, "
        "expectedTime2, "
        "expectedError, ",
        dataForTest(),
    )
    def test_usecase1(self, loginCredential, eventName, startTime, extend,
                      eventDescription, eventLocation, durationSelection,
                      durationUntil, durationMinutes,
                      repeat, noOfRepeat,
                      expectedTime, expectedDescription, expectedLocation,
                      expectedTime2, expectedError):
        self.driver.get("https://sandbox404.moodledemo.net/")
        self.driver.set_window_size(1274, 757)
        self.driver.find_element(By.CSS_SELECTOR, ".login > a").click()
        time.sleep(3)
        self.driver.find_element(By.ID, "username").clear()
        self.driver.find_element(By.ID, "password").clear()
        self.driver.find_element(By.ID, "username").send_keys(loginCredential[0])
        self.driver.find_element(By.ID, "password").send_keys(loginCredential[1])
        self.driver.find_element(By.CSS_SELECTOR, ".login-container").click()
        self.driver.find_element(By.ID, "loginbtn").click()
        time.sleep(3)       #page transition wait
        self.driver.find_element(By.LINK_TEXT, "Dashboard").click()
        time.sleep(2)       #page transition wait
        self.vars["month"] = self.driver.find_element(By.CSS_SELECTOR, ".current:nth-child(3)").text
        if self.driver.execute_script("return (arguments[0] != \"November 2024\")", self.vars["month"]):
            assert self.driver.find_element(By.CSS_SELECTOR, ".arrow_text:nth-child(2)").text == "November"
            self.driver.find_element(By.CSS_SELECTOR, ".arrow_text:nth-child(2)").click()
        self.driver.find_element(By.XPATH, "//button[contains(.,\'New event\')]").click()
        self.driver.find_element(By.ID, "id_name").send_keys(eventName)

        self.driver.find_element(By.ID, "id_timestart_day").click()
        dropdown = self.driver.find_element(By.ID, "id_timestart_day")
        dropdown.find_element(By.XPATH, f".//option[. = '{startTime[0]}']").click()

        self.driver.find_element(By.ID, "id_timestart_month").click()
        dropdown = self.driver.find_element(By.ID, "id_timestart_month")
        dropdown.find_element(By.XPATH, f".//option[. = '{startTime[1]}']").click()

        self.driver.find_element(By.ID, "id_timestart_year").click()
        dropdown = self.driver.find_element(By.ID, "id_timestart_year")
        dropdown.find_element(By.XPATH, f".//option[. = '{startTime[2]}']").click()

        self.driver.find_element(By.ID, "id_timestart_hour").click()
        dropdown = self.driver.find_element(By.ID, "id_timestart_hour")
        ##get elements from parent element using XPATH
        ##NOTE: in order to utilize XPATH from current element, you must add "." to beginning of path
        dropdown.find_element(By.XPATH, f".//option[. = '{startTime[3]}']").click()
        self.driver.find_element(By.ID, "id_timestart_minute").click()
        dropdown = self.driver.find_element(By.ID, "id_timestart_minute")
        dropdown.find_element(By.XPATH, f".//option[. = '{startTime[4]}']").click()
        if extend:
            self.driver.find_element(By.LINK_TEXT, "Show more...").click()
            time.sleep(3)
            # access data in a iframe: https://stackoverflow.com/questions/52045083/how-to-get-attribute-src-from-iframe-in-iframe-using-selenium
            self.driver.switch_to.frame("id_description_ifr")
            element = self.driver.find_element(By.ID, "tinymce")
            self.driver.execute_script(
                "if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '" + eventDescription + "'}",
                element)
            time.sleep(1)
            self.driver.switch_to.default_content()

            self.driver.find_element(By.ID, "id_location").send_keys(eventLocation)
            self.driver.find_element(By.ID, f"id_duration_{durationSelection}").click()
            if durationSelection == "1":
                self.driver.find_element(By.ID, "id_timedurationuntil_day").click()
                dropdown = self.driver.find_element(By.ID, "id_timedurationuntil_day")
                dropdown.find_element(By.XPATH, f".//option[. = '{durationUntil[0]}']").click()
                self.driver.find_element(By.ID, "id_timedurationuntil_month").click()
                dropdown = self.driver.find_element(By.ID, "id_timedurationuntil_month")
                dropdown.find_element(By.XPATH, f".//option[. = '{durationUntil[1]}']").click()
                self.driver.find_element(By.ID, "id_timedurationuntil_year").click()
                dropdown = self.driver.find_element(By.ID, "id_timedurationuntil_year")
                dropdown.find_element(By.XPATH, f".//option[. = '{durationUntil[2]}']").click()
                self.driver.find_element(By.ID, "id_timedurationuntil_hour").click()
                dropdown = self.driver.find_element(By.ID, "id_timedurationuntil_hour")
                dropdown.find_element(By.XPATH, f".//option[. = '{durationUntil[3]}']").click()
                self.driver.find_element(By.ID, "id_timedurationuntil_minute").click()
                dropdown = self.driver.find_element(By.ID, "id_timedurationuntil_minute")
                dropdown.find_element(By.XPATH, f".//option[. = '{durationUntil[4]}']").click()
            elif durationSelection == "2":
                self.driver.find_element(By.ID, "id_timedurationminutes").click()
                self.driver.find_element(By.ID, "id_timedurationminutes").send_keys(durationMinutes)
            if (repeat):
                self.driver.find_element(By.ID, "id_repeat").click()
                self.driver.find_element(By.ID, "fitem_id_repeats").click()
                self.driver.find_element(By.ID, "id_repeats").clear()
                self.driver.find_element(By.ID, "id_repeats").send_keys(noOfRepeat)
        self.driver.find_element(By.XPATH, "//button[contains(.,\'Save\')]").click()
        time.sleep(1)

        if eventName == "":
            assert self.driver.find_element(By.ID, "id_error_name").text == expectedError
            self.exception = True

        if extend and durationSelection == "1" and startTime[0] > durationUntil[0]:
            time.sleep(3)
            assert self.driver.find_element(By.ID,"fgroup_id_error_durationgroup").text == expectedError
            self.exception = True
            self.driver.find_element(By.ID, "id_timedurationuntil_day").click()
            dropdown = self.driver.find_element(By.ID, "id_timedurationuntil_day")
            dropdown.find_element(By.XPATH, f".//option[. = '{startTime[0]}']").click()

        if not self.exception:
            self.driver.find_element(By.CSS_SELECTOR, ".eventname").click()
            # self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(1) > .col-11").click()
            time.sleep(2)
            assert self.driver.find_element(By.CSS_SELECTOR, ".dimmed_text").text == expectedTime
            if extend:
                if expectedDescription != "":
                    assert self.driver.find_element(By.CSS_SELECTOR, ".description-content > p").text == expectedDescription
                if expectedLocation != "":
                    assert self.driver.find_element(By.CSS_SELECTOR, ".location-content").text == expectedLocation
            time.sleep(1)
            self.driver.find_element(By.XPATH, "//div[2]/div/div/div[3]/button").click()
            time.sleep(1)
            if not repeat:
                delButton = self.driver.find_element(By.XPATH, "//button[contains(.,\'Delete event\')]")
                delButton.click()
                time.sleep(1)
            else:
                delButton = self.driver.find_element(By.XPATH, "//button[contains(.,\'Delete this event\')]")
                delButton.click()

                time.sleep(3)
                # delete second event:
                self.driver.find_element(By.XPATH, "//tr[4]/td[2]/div/div/ul/li/a/span[2]").click()
                time.sleep(2)
                assert self.driver.find_element(By.CSS_SELECTOR, ".dimmed_text").text == expectedTime2
                if extend:
                    if expectedDescription != "":
                        assert self.driver.find_element(By.CSS_SELECTOR, ".description-content > p").text == "Testing event"
                    if expectedLocation != "":
                        assert self.driver.find_element(By.CSS_SELECTOR, ".location-content").text == "School"
                time.sleep(2)       # to find the damn button
                delButton = self.driver.find_element(By.XPATH, ".//div[2]/div/div/div[3]/button")
                delButton.click()
                time.sleep(1)
                delButton2 = self.driver.find_element(By.XPATH, "//button[contains(.,\'Delete event\')]")
                delButton2.click()

        else:       # exception = True
            self.driver.find_element(By.ID, "id_name").click()
            self.driver.find_element(By.ID, "id_name").clear()
            self.driver.find_element(By.ID, "id_name").send_keys("exception")
            time.sleep(3)
            exButton = self.driver.find_element(By.XPATH, "//button[contains(.,'Save')]")
            exButton.click()
            if exButton.is_displayed():
                exButton.click()
            time.sleep(1)
            self.driver.find_element(By.XPATH, "//span[contains(.,\'exception\')]").click()
            time.sleep(2)
            self.driver.find_element(By.XPATH, "//div[2]/div/div/div[3]/button").click()
            time.sleep(1)
            delButton = self.driver.find_element(By.XPATH, "//button[contains(.,\'Delete event\')]")
            delButton.click()

        #log out
        time.sleep(3)
        self.driver.find_element(By.ID, "user-menu-toggle").click()
        self.driver.find_element(By.XPATH, "//a[contains(.,\'Log out\')]").click()
